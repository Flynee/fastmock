{"version":3,"sources":["components/FixedLoading/FixedLoading.js","components/index.js","App.js","utils/Config.js","utils/HttpUtils.js","serviceWorker.js","index.js","utils/UserLogin.js"],"names":["FixedLaoding","_this","Object","classCallCheck","this","_super","call","state","tip","bgColor","react_default","a","createElement","className","style","backgroundColor","props","spin","size","spinning","React","Component","__webpack_require__","d","__webpack_exports__","FixedLoading","loadingComponent","_ref","isLoading","error","components","Login","Loadable","loader","Promise","all","e","then","bind","loading","Register","ForgetPwd","RegisterResult","DoActive","Projects","Api","Home","Feedback","ProjectMenbers","Handbook","App","HashRouter","Route","exact","path","component","Config","axios","defaults","baseURL","headers","common","history","createHashHistory","toastr","options","timeOut","progressBar","Http","routerComp","_url","_ajaxOptions","_data","arguments","length","undefined","method","isNeedLogin","console","info","concat","JSON","stringify","_headers","token","UserLogin","getLoginToken","isFromThird","sign","ajaxDataKey","ajaxOptions","url","withCredentials","dataType","defineProperty","res","code","data","substr","remove","removeLoginInfo","setTimeout","push","success","errorMsg","desc","catch","err","request","_params","Boolean","window","location","hostname","match","http","HttpUtils","message","config","duration","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","LOGININFOKEY","localStorage","getItem","isLogin","parse","getLoginInfo","loginInfo","setItem","removeItem","indexOf","callback","hasPermission"],"mappings":"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","file":"static/js/main.894c6c0c.chunk.js","sourcesContent":["import { Spin } from 'antd';\nimport React from 'react';\nimport './style.scss';\nclass FixedLaoding extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      tip: '加载中',\n      bgColor: '#fff'\n    };\n  }\n  render() {\n    return (\n      <div className=\"overlay\" style={{ backgroundColor: this.state.bgColor || this.props.bgColor }}>\n        <Spin size={this.props.size || null} tip={this.props.tip || this.state.tip} spinning={true}></Spin>\n      </div>\n    );\n  }\n};\nexport default FixedLaoding;\n","import FixedLoading from './FixedLoading/FixedLoading';\nexport {\n  FixedLoading\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { FixedLoading } from './components';\n// 按路由拆分代码\nimport Loadable from 'react-loadable';\nconst loadingComponent = ({ isLoading, error }) => {\n  // Handle the loading state\n  if (isLoading) {\n    return <FixedLoading tip=\"页面加载中...\" size=\"large\"></FixedLoading>;\n  } else if (error) {\n    return <div>Sorry, there was a problem loading the page.</div>;\n  } else {\n    return null;\n  }\n};\nconst Login = Loadable({\n  loader: () => import('./views/Login/Login'),\n  loading: loadingComponent\n});\nconst Register = Loadable({\n  loader: () => import('./views/Register'),\n  loading: loadingComponent\n});\nconst ForgetPwd = Loadable({\n  loader: () => import('./views/ForgetPwd'),\n  loading: loadingComponent\n});\nconst RegisterResult = Loadable({\n  loader: () => import('./views/RegisterResult'),\n  loading: loadingComponent\n});\nconst DoActive = Loadable({\n  loader: () => import('./views/RegisterResult/DoActive'),\n  loading: loadingComponent\n});\nconst Projects = Loadable({\n  loader: () => import('./views/Projects/Projects'),\n  loading: loadingComponent\n});\nconst Api = Loadable({\n  loader: () => import('./views/Api'),\n  loading: loadingComponent\n});\nconst Home = Loadable({\n  loader: () => import('./views/Home/Home'),\n  loading: loadingComponent\n});\nconst Feedback = Loadable({\n  loader: () => import('./views/Feedback/Feedback'),\n  loading: loadingComponent\n});\nconst ProjectMenbers = Loadable({\n  loader: () => import('./views/ProjectMenbers'),\n  loading: loadingComponent\n});\nconst Handbook = Loadable({\n  loader: () => import('./views/Handbook/Handbook'),\n  loading: loadingComponent\n});\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <HashRouter>\n          <Route exact path=\"/\" component={Login}></Route>\n        </HashRouter>\n        <HashRouter><Route path=\"/register\" component={Register}></Route></HashRouter>\n        <HashRouter><Route path=\"/regres/:userId\" component={RegisterResult}></Route></HashRouter>\n        <HashRouter><Route path=\"/active/:code\" component={DoActive}></Route></HashRouter>\n        <HashRouter><Route path=\"/forgetpwd\" component={ForgetPwd}></Route></HashRouter>\n        <HashRouter><Route path=\"/home\" component={Home}></Route></HashRouter>\n        <HashRouter><Route path=\"/projects\" component={Projects}></Route></HashRouter>\n        <HashRouter><Route path=\"/handbook\" component={Handbook}></Route></HashRouter>\n        <HashRouter><Route exact path=\"/project/:id\" component={Api}></Route></HashRouter>\n        <HashRouter><Route path=\"/project/:id/menber/:pname\" component={ProjectMenbers}></Route></HashRouter>\n        <HashRouter><Route path=\"/feedback\" component={Feedback}></Route></HashRouter>\n      </div>\n    );\n  }\n}\nexport default App;\n","export default {\n  HTTPMOCK_ON: false,\n  // ENV: process.env.ENV,\n  UPLOAD_FILE_MAX_SIZE: 1024, // 上传文件限制，50M\n  HTTPMOCK_TIMEOUT: 10000,\n  XHRLOG: true, // 是否console出ajax的详细信息；右上角的Notice是否打印url和code\n  HTTPBASEURL: '/mockApi' // 开发服务器\n};\n","/**\n * Created by marven on 2017/09/23.\n */\nimport axios from \"axios\"\nimport Config from \"./Config\"\n// import MyRouter from '@/router';\nimport UserLogin from \"./UserLogin\"\nimport toastr from \"toastr\"\nimport { createHashHistory } from \"history\"\n// 处理Raw纯json字符串得请求\naxios.defaults.baseURL = Config.HTTPBASEURL\naxios.defaults.headers.common[\"Content-Type\"] = \"application/json;charset=UTF-8\"\nconst history = createHashHistory()\ntoastr.options = {\n  timeOut: 2000,\n  progressBar: true,\n}\nclass Http {\n  constructor(routerComp) {\n    this.routerComp = routerComp\n  }\n  /**\n   * 发起ajax请求\n   * @param _url\n   * @param method 请求方式\n   * @param _data\n   * @param isNeedLogin 是否需要登录token默认为需要，不需要传递false即可\n   */\n  request(_url, _data = {}, method, isNeedLogin = true) {\n    if (Config.XHRLOG) {\n      /* eslint-disable */\n      console.info(`----来自${_url}的${method}请求----`)\n      console.info(JSON.stringify(_data))\n      /* eslint-disable */\n    }\n    let _headers = {}\n    if (isNeedLogin) {\n      _headers = {\n        token: \"\" + UserLogin.getLoginToken(),\n      }\n      if (this.isFromThird) {\n        _headers.sign = UserLogin.getLoginToken()\n      }\n    }\n    let ajaxDataKey = method === \"POST\" ? \"data\" : \"params\"\n    let ajaxOptions = {\n      url: _url,\n      withCredentials: true,\n      dataType: \"json\",\n      [ajaxDataKey]: _data,\n      headers: _headers,\n      method: method,\n    }\n    return axios(ajaxOptions)\n      .then((res) => {\n        let code = res.data.code.substr(res.data.code.length - 4) // 截取code的后四位\n        toastr.remove()\n        if (code === \"0004\") {\n          toastr.error(\"session已经过期，请重新登录!\", \"错误提示：\")\n          UserLogin.removeLoginInfo()\n          setTimeout(() => {\n            history.push(\"/\")\n          }, 500)\n          let data = res.data\n          data.success = false\n          return data\n        } else if (code === \"0000\") {\n          let data = res.data\n          data.success = true\n          return data\n        } else {\n          let errorMsg = Config.XHRLOG\n            ? _url + \"<br/>\" + res.data.code + \" <br/> \" + res.data.desc\n            : res.data.desc\n          toastr.error(errorMsg, \"错误提示：\")\n          let data = res.data\n          data.success = false\n          return data\n        }\n      })\n      .catch((err) => {\n        toastr.remove()\n        toastr.error(\"网络错误\", \"错误提示：\")\n      })\n  }\n  /**\n   * 发起post请求\n   * @param _url\n   * @param _data\n   * @param isNeedLogin 是否需要登录token默认为需要，不需要传递false即可\n   */\n  post(_url, _data, isNeedLogin = true) {\n    return this.request(_url, _data, \"POST\", isNeedLogin)\n  }\n  /**\n   * 发起get请求\n   * @param _url\n   * @param _params get参数\n   * @param isNeedLogin 是否需要登录token默认为需要，不需要传递false即可\n   */\n  get(_url, _params = {}, isNeedLogin = true) {\n    return this.request(_url, _params, \"GET\", isNeedLogin)\n  }\n}\nexport default Http\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport HttpUtils from './utils/HttpUtils';\nimport * as serviceWorker from './serviceWorker';\nimport 'toastr/build/toastr.css';\nimport { message } from 'antd';\nwindow.http = new HttpUtils(App);\nmessage.config({\n  duration: 2\n});\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/**\n * Created by MarvenGong on 2017/11/10.\n */\nimport toastr from 'toastr';\nclass UserLogin {\n  LOGININFOKEY='loginInfo';\n  /**\n   * 判断是否登录\n   * @returns {boolean}\n   */\n  isLogin() {\n    let localLoginInfo = window.localStorage.getItem(this.LOGININFOKEY);\n    // 针对第三方访问页面的情况，如果url后面带有token，则也视为已经登录的状态，不跳转到登录页面\n    if (localLoginInfo) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\n   * 获取登录信息\n   * @returns {{}}\n   */\n  getLoginInfo() {\n    if (this.isLogin()) {\n      return JSON.parse(localStorage.getItem(this.LOGININFOKEY));\n    } else {\n      // alert('未登录');\n      return {};\n    }\n  }\n  /**\n   * 获取token\n   * @returns {token}\n   */\n  getLoginToken() {\n    let loginInfo = this.getLoginInfo();\n    // 针对第三方访问页面的情况，如果url后面带有token，则取url带的token\n    return loginInfo.token;\n  }\n  /**\n   * 存储登录信息\n   * @param loginInfo\n   * @returns {{}}\n   */\n  setLoginInfo(loginInfo) {\n    localStorage.setItem(this.LOGININFOKEY, JSON.stringify(loginInfo));\n    return this.getLoginInfo();\n  }\n  /**\n   * 清空登录信息\n   */\n  removeLoginInfo() {\n    localStorage.removeItem(this.LOGININFOKEY);\n  }\n\n  /**\n   * 判断是否有权限执行当前操作\n   * @param url\n   * @returns {boolean}\n   */\n  hasPermission(url) {\n    return localStorage.getItem('actionPermissions').indexOf(url) >= 0;\n  }\n  checkPermission(url, callback) {\n    if (!this.hasPermission(url)) {\n      toastr.error('您没有权限执行当前操作', '警告');\n      return false;\n    } else {\n      callback();\n    }\n  }\n}\nexport default new UserLogin();\n"],"sourceRoot":""}